example adn guide:
    - https://teoriadeisegnali.it/appint/html/altro/bgnet/index.html
socket:
    - socket  setsockopt() necessary to keep alive https://www.ibm.com/docs/en/zos/2.4.0?topic=calls-setsockopt https://www.ibm.com/docs/en/aix/7.2?topic=s-setsockopt-subroutine
    - socket explanation video part 1 and 2 https://www.youtube.com/watch?v=gntyAFoZp-E
epoll():
    - https://idndx.com/the-implementation-of-epoll-1/
    - https://idndx.com/the-implementation-of-epoll-2/
    - https://idndx.com/the-implementation-of-epoll-3/
    - https://idndx.com/the-implementation-of-epoll-4/
multiplexing:
    - if we want to use select() :
                                    - https://codereview.stackexchange.com/questions/111310/select-server-implementation
                                    - https://italiancoders.it/the-big-select-come-usare-la-select2-in-c-e-c-pt-1/
                                    - https://italiancoders.it/the-big-select-come-usare-la-select2-in-c-e-c-pt-2/
    - poll() or select():
                            - https://mecha-mind.medium.com/a-non-threaded-chat-server-in-c-53dadab8e8f3
                            - https://www.ibm.com/docs/en/i/7.4?topic=designs-using-poll-instead-select
                            - https://hechao.li/2022/01/04/select-vs-poll-vs-epoll/
                            - https://stackoverflow.com/questions/17355593/why-is-epoll-faster-than-select
                            - https://devarea.com/linux-io-multiplexing-select-vs-poll-vs-epoll/
workflow:
    - parser config file: acquire information from config file or if there isn't take the default and initialize struct and class
    - "socket" server client run? file: organize all concern about server and client think to keep alive
    - "HTTP" request? response? file: working for

parser:
    read config file check if is ok and populate struct
config:
    error check? initialize?
server:
    initialize all about server :
        create socket
        bind socket
        listen on the socket
        accept connection
        send and receive data? maybe is HTTP block
        disconnect?
client:
    initialize all about client :
        create socket
        connect to the server
        send and receive data
        disconnect??
request: see webserver_flowchart
        - https://freedium.cfd/https://medium.com/from-the-scratch/http-server-what-do-you-need-to-know-to-build-a-simple-http-server-from-scratch-d1ef8945e4fa

response:

mainly request response key:
    - https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields



int error(std::string str) {
    std::cout << "Error : " << str << std::endl;
    return -1;
}

int main(int argc, char **argv) {
    FILE *fd;
    int i = 0;
    if (argc != 4) {
        std::cout << argc << std::endl;
        error("too much arguments");
    }
    std::string s2 = argv[3];
    std::string s1 = argv[2];
    std::string filename = argv[1];
    //.isopen()
    if ((fd = fopen(argv[1], "r")) == NULL) {
        return error("file not found");
    }

    std::ifstream source(argv[1], std::ios::binary);
    std::string replace = ".replace";
    std::ofstream dest(filename + replace, std::ios::binary);

    source.seekg(0, std::ios::end);
    std::ifstream::pos_type size = source.tellg();
    source.seekg(0);
    // allocate memory for buffer
    char *buffer = new char[size];

    // copy file
    source.read(buffer, size);
    std::string appog;
    appog.append(buffer);
    int flag = -1;
    while ((i = appog.find(argv[2])) != (int) std::string::npos) {
        appog.resize(appog.size() + s2.size());
        appog.insert(i, s2);
        appog.erase(i + s2.size(), s1.size());
        flag = 0;
    }
    if (flag == -1)
        return error("s2 string is not in the file");
    dest.write(appog.c_str(), size);

    // clean up
    delete[] buffer;
    source.close();
    dest.close();
    std::system("echo \"\033[38;5;46m auto test result \033[0m\"");
    std::string str = "diff ";
    str.append(filename + " " + filename + replace+"| grep pippo |wc -l; diff ");
    str.append(filename + " " + filename + replace+"| grep pippa|wc -l");
    std::cout<<str<<std::endl;
//    "diff filename filename.replace | grep pippo ;  grep pippo"

    std::system(str.c_str());

    return 0;


}